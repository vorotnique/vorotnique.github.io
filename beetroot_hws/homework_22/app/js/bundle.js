(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

//•1•
var name = prompt('Введите Ваше имя:');

if (name != null) {
  alert("Привет, " + name + "!");
} else {
  alert('Хоть бы представились для приличия…');
} //•2•


var birthDate = prompt('Введите Ваш год рождения:');
var today = 2019;
var age = today - birthDate;

if (isNaN(birthDate)) {
  alert('Вы не ввели год рождения правильно');
} else {
  alert("Вам " + age + " лет, либо исполнится " + age + " в этом году.");
} //•3•


var squareSide = prompt('Укажите длину стороны квадрата:');
alert('Периметр квадрата равен '.concat(squareSide * 4, '.')); //•4•

var circleRadius = prompt('Укажите радиус окружности:');
var circleSquare = Math.PI * Math.pow(circleRadius, 2);
alert('Площадь круга равна '.concat(circleSquare.toFixed(3))); //•5•

var distance = prompt('Укажите расстояние в километрах между городами:', '');
var time = prompt('Укажите время на дорогу в часах:', '');

if (distance != null && time != null) {
  alert("Нужная скорость: ".concat((distance / time).toFixed(0), " км/ч"));
} else {
  alert('Неверный ввод');
} //•6•


var rate = 0.9;
var dollar = prompt('Введите сумму в долларах');
var euro = dollar * rate;
alert('Сумма в евро: ' + euro.toFixed(2)); //•7•

var fileSize = 820;
var realByte = 1024;
var fakeByte = 953;
var amount = prompt('Укажите объём флэшки в ГБ:');
alert('В идеальном мире, где фактический объём совпадает с написанным на коробках, поместится ' + Math.floor(amount * realByte / 820) + ' файлов, а на самом деле - всего ' + Math.floor(amount * fakeByte / 820) + ' файлов.'); //•8•

var money = prompt('Какой суммой располагаете?');
var price = prompt('Почём нынче шоколадки?');
alert('Вам хватит на ' + Math.floor(money / price) + ' шоколадок, и останется ' + (money % price).toFixed(2) + ' сдачи.'); //•9•

var number = prompt('Введите трёхзначное число:');

if (number.length !== 3) {
  alert('Трёхзначное, говорю!');
} else {
  alert('Задом наперёд это число будет считаться как ' + number.split('').reverse().join(''));
} //•10•


var deposit = prompt('Введите сумму вклада:');
var month = 2;
var percent = 0.05;
alert('Вам будет начислено ' + (deposit * month / 12 * percent).toFixed(2) + ' годовых.');

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
